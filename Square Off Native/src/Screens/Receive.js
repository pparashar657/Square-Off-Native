import React from 'react';
import * as Constants from '../Classes/Constants';
import Heading from '../Components/Heading';
import DropDown from '../Components/DropDown';
import { View, Button, ScrollView, ActivityIndicator, Alert, Picker, TextInput } from 'react-native';
import InputText from '../Components/InputText';
import FooterButtons from '../Components/FooterButtons'
import { styles } from '../Styles/ReceiveStyles';
import headImage from './Assets/receive.png';

export class ReceiveScreen extends React.Component {

    static navigationOptions = {
        header: null,
    };

    constructor(props) {
        super(props)

        this.state = {
            transactionType: '',
            source: '',
            destination: '',
            shipmentType: '',
            groupId: '',
            trackingId: '',
            isValid: false,
            isManualReceive: false,
            isSomethingSelected: false,
            isSCFC: false,
            processingSubmitCheck: false,
            processingManualReceive: false,
        }
    }

    updateTransactionType = (transactionType) => {
        if (transactionType != '') {
            this.setState({ isSomethingSelected: true })
            if (transactionType != 'scfc') {
                this.setState({ isSCFC: false })
            } else {
                this.setState({ isSCFC: true })
            }
        } else {
            this.setState({ isSomethingSelected: false })
        }
        this.setState({ transactionType: transactionType })
    }

    updateSource = (source) => {
        this.setState({ source: source })
    }

    updateDestination = (destination) => {
        this.setState({ destination: destination })
    }

    updateShipmentType = (shipmentType) => {
        this.setState({ shipmentType: shipmentType })
    }

    updateGroupId = (groupId) => {
        this.setState({ groupId: groupId })
    }

    updateTrackingId = (trackingId) => {
        this.setState({ trackingId: trackingId })
    }

    autoGenerateChallan = () => {
        if (this.state.source == '') {
            Alert.alert(
                'ERROR:',
                'Please Enter the Source',
                [{ text: 'OK' }],
            )
        } else if (this.state.destination == '') {
            Alert.alert(
                'ERROR:',
                'Please Enter the Target',
                [{ text: 'OK' }],
            )
        } else {
            var date = new Date().toLocaleString()
            var autoGeneratedChallan = this.state.source + '_' + this.state.destination + '_' + date
            this.setState({ groupId: autoGeneratedChallan })
        }
    }

    manualReceive = () => {
        this.setState({ isManualReceive: !this.state.isManualReceive })
    }

    checkValidity = () => {
        // TODO
        // Checks wheather the Entered Target And Challan Matches or Not
        return true
    }

    showCompleteAlert = () => {
        Alert.alert(
            'ERROR:',
            'Please Complete the details',
            [{ text: 'OK' }],
            { cancelable: false },
        )
    }

    isCompleted = () => {
        if (this.state.transactionType == '' || this.state.destination == '' || this.state.groupId.trim() == '' || (!this.state.isSCFC && (this.state.source == ''))) {
            return false
        } else {
            return true
        }
    }

    submitCheck = () => {
        if (this.isCompleted()) {
            this.setState({ processingSubmitCheck: true })
            if (this.state.isSCFC && !this.checkValidity()) {
                showCompleteAlert = () => {
                    Alert.alert(
                        'ERROR:',
                        'Cannot find matching Traget and Challan no. Please try again !',
                        [{ text: 'OK' }],
                        { cancelable: false },
                    )
                }
            } else {
                this.setState({ processingSubmitCheck: false })
                this.setState({ isValid: true })
            }
        } else {
            this.showCompleteAlert()
        }
    }

    receive = () => {
        if (this.state.trackingId.trim() == '') {
            Alert.alert(
                'ERROR:',
                'Please Enter the Tracking ID !',
                [{ text: 'OK' }],
            )
        } else {
            if (!this.state.isSCFC && this.state.shipmentType == '') {
                Alert.alert(
                    'ERROR:',
                    'Please Choose a Shipment Type !',
                    [{ text: 'OK' }],
                )
            } else {
                this.setState({ processingManualReceive: true })
                // TODO
                // Reconcile The Package
                this.setState({ processingManualReceive: false })
                this.setState({ trackingId: '' })
                Alert.alert(
                    'Success:',
                    'Package Reconciled !',
                    [{ text: 'OK' }],
                )
            }
        }
    }

    scanItems = () => {
        // TODO
        // Bar code Scanner To be added
    }

    receiveSummary = () => {
        this.props.navigation.navigate(Constants.ReceiveSummary, { 'source': this.state.source, 'target': this.state.destination, 'challan': this.state.groupId });
    }

    submit = () => {
        Alert.alert(
            'Alert:',
            'Are you sure, you want to Submit?',
            [
                { text: 'Cancel' },
                { text: 'Yes, Submit', onPress: () => { this.props.navigation.navigate(Constants.Home) } },
            ],
            { cancelable: false },
        )
    }

    render() {

        return (
            <ScrollView>

                <View style={styles.container}>

                    <Heading
                        text='Receive Package'
                        image={headImage} />

                    <View>

                        <DropDown
                            text='Transaction Type :'
                            value={this.state.transactionType}
                            isEnabled={!this.state.isValid}
                            onSelect={this.updateTransactionType}
                            list={Constants.ReceiveTransactionTypes}
                        />

                        {
                            this.state.isSomethingSelected &&
                            <View>

                                {
                                    !this.state.isSCFC &&
                                    <DropDown
                                        text='Source Node :'
                                        value={this.state.source}
                                        isEnabled={!this.state.isValid}
                                        onSelect={this.updateSource}
                                        list={Constants.ThreePs}
                                    />
                                }

                                <DropDown
                                    text='Target Node :'
                                    value={this.state.destination}
                                    isEnabled={!this.state.isValid}
                                    onSelect={this.updateDestination}
                                    list={Constants.FCs}
                                />

                                <InputText
                                    text='Challan No :'
                                    placeholder='Challan No'
                                    editable={!this.state.isValid}
                                    callBack={this.updateGroupId}
                                    value={this.state.groupId}
                                    width={200}
                                />

                                {
                                    !this.state.isSCFC &&
                                    <View style={styles.autoGenerate}>

                                        <View style={styles.pickerType}>
                                            <Picker
                                                mode="dropdown"
                                                selectedValue={this.state.shipmentType}
                                                onValueChange={this.updateShipmentType}>
                                                <Picker.Item label="Type .." value='' />
                                                <Picker.Item label="Regular" value="regular" />
                                                <Picker.Item label="Damaged" value="damaged" />
                                            </Picker>
                                        </View>

                                        <Button
                                            onPress={this.autoGenerateChallan}
                                            title="Auto-Generate Challan"
                                            disabled={this.state.isValid}
                                            color="#F6C24F"
                                        />

                                    </View>
                                }

                                <View style={styles.setMargin}>

                                    {
                                        !this.state.isValid &&
                                        <View>
                                            {
                                                this.state.processingSubmitCheck &&
                                                <View style={styles.makeCenter}>
                                                    <ActivityIndicator
                                                        size="large"
                                                        color="black"
                                                    />
                                                </View>
                                            }

                                            {
                                                !this.state.processingSubmitCheck &&
                                                <View style={styles.makeCenter}>
                                                    <Button
                                                        onPress={this.submitCheck}
                                                        title="Submit"
                                                        color="#FF8C00"
                                                    />
                                                </View>
                                            }
                                        </View>
                                    }

                                    {
                                        this.state.isValid &&
                                        <Button
                                            onPress={this.manualReceive}
                                            title="Manually Receive"
                                            color="grey"
                                        />
                                    }

                                </View>

                                {
                                    this.state.isManualReceive &&
                                    <View style={styles.manualHolder}>

                                        <TextInput style={styles.input}
                                            placeholder='Tracking ID'
                                            underlineColorAndroid='transparent'
                                            placeholderTextColor='black'
                                            autoCapitalize="none"
                                            value={this.state.trackingId}
                                            selectionColor='black'
                                            onChangeText={this.updateTrackingId} />

                                        {
                                            !this.state.processingManualReceive &&
                                            <Button
                                                title='Receive'
                                                color='#FF8C00'
                                                onPress={this.receive}
                                            />
                                        }

                                        {
                                            this.state.processingManualReceive &&
                                            <View style={styles.progress}>
                                                <ActivityIndicator
                                                    size="large"
                                                    color="black"
                                                />
                                            </View>
                                        }

                                    </View>
                                }

                                {
                                    this.state.isValid &&
                                    <View>

                                        <View style={styles.setMargin}>
                                            <Button
                                                onPress={this.scanItems}
                                                title="Scan Items"
                                                color="grey"
                                            />
                                        </View>

                                        <FooterButtons
                                            onPrimaryButtonClick={this.receiveSummary}
                                            primaryButtonText='Receive Summary'
                                            onSecondaryButtonClick={this.submit}
                                            secondaryButtonText='Submit'
                                        />

                                    </View>
                                }
                            </View>
                        }

                    </View>

                </View>

            </ScrollView >
        );
    }
}